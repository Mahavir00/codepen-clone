{"version":3,"sources":["hooks/useLocalStorage.js","components/Editor.js","components/Popup.js","components/FileExplorer.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prekey","useState","json","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Editor","props","language","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","Popup","trigger","href","link","onClick","setTrigger","FileExplorer","setLanguage","share","getCode","importLink","setImportLink","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","popup","setPopup","pastebinLink","a","fetch","method","headers","body","qs","api_dev_key","api_option","api_paste_code","api_paste_format","response","console","log","timeout","setTimeout","clearTimeout","Headers","append","l","substr","length","then","text","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f3d835e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst PRE = 'dyte-'\r\nexport const useLocalStorage = (key, initialValue) => {\r\n    const prekey = PRE + key //naming the file\r\n\r\n    //retrieve\r\n    const [value, setValue] = useState(() => {\r\n        const json = localStorage.getItem(prekey)\r\n        if (json != null) return JSON.parse(json)\r\n        return initialValue\r\n    })\r\n\r\n    //store\r\n    useEffect(() => {\r\n        localStorage.setItem(prekey, JSON.stringify(value))\r\n    }, [prekey, value])\r\n    return [value, setValue]\r\n}","import React from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml' //Syntax Highlighting for HTML\r\nimport 'codemirror/mode/css/css'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2' //Editor Component\r\n\r\n\r\n\r\nexport default function Editor(props) {\r\n    const {language,value,onChange} = props\r\n\r\n    const handleChange = (editor, data, value) => onChange(value)\r\n\r\n    return (language)?(\r\n        <div className={`editor-container`}>\r\n           <ControlledEditor\r\n           onBeforeChange={handleChange}\r\n           value={value}\r\n           className=\"code-mirror-wrapper\"\r\n           options={{\r\n               lineWrapping:true,\r\n               lint: true,\r\n               mode: (language==='html')?'xml':language,\r\n               theme: \"material\",\r\n               lineNumbers: true\r\n           }}\r\n           />\r\n        </div>\r\n    ):<></>\r\n}\r\n","import React from 'react'\r\n// Popup to display generated link\r\nexport default function Popup(props) {\r\n    //triggered using props.trigger\r\n    return (props.trigger)? (\r\n        <div className=\"popup\">\r\n            <div className=\"popup-inner\">\r\n                Pastebin Link: <a href={props.link}>{props.link}</a>\r\n                <button \r\n                    className=\"btn-close\" \r\n                    onClick={()=>props.setTrigger(false)}\r\n                >\r\n                    CLOSE\r\n                </button>\r\n            </div>\r\n        </div>\r\n    ) : \"\"\r\n}\r\n","import React from 'react'\r\n\r\nexport default function FileExplorer(props) {\r\n    const {language,setLanguage,share,getCode,importLink,setImportLink}=props\r\n    return (\r\n        <div className=\"explorer\">\r\n            {/* HTML Button */}\r\n            <button \r\n                className={(language===\"html\")?\"pressed\":\"btn\"} \r\n                onClick={(language=='html')?()=>setLanguage(\"\"):()=>setLanguage(\"html\")}\r\n            >\r\n                HTML\r\n            </button>\r\n\r\n            {/* CSS Button */}\r\n            <button \r\n                className={(language===\"css\")?\"pressed\":\"btn\"} \r\n                onClick={(language=='css')?()=>setLanguage(\"\"):()=>setLanguage(\"css\")}\r\n            >\r\n                CSS\r\n            </button>\r\n\r\n            {/* Js Button */}\r\n            <button \r\n                className={(language===\"javascript\")?\"pressed\":\"btn\"} \r\n                onClick={(language=='javascript')?()=>setLanguage(\"\"):()=>setLanguage(\"javascript\")}\r\n            >\r\n                Js\r\n            </button>\r\n\r\n            {/* Share Code Button */}\r\n            <button \r\n                className=\"btn postbin\" \r\n                onClick={share}\r\n            >\r\n                Share {/*(language===\"html\")?\"HTML\":((language===\"css\")?\"CSS\":\"JavaScript\")*/} Code \r\n            </button>\r\n            {/* <input type=\"text\" className=\"postbinLink\" size=\"50\" placeholder={`Enter ${language} code shared link...`} value={importLink} onChange={e=>setImportLink(e.target.value)}/> */}\r\n            {/* <button className=\"btn postbin submit\" onClick={getCode}> Import {(language===\"html\")?\"HTML\":((language===\"css\")?\"CSS\":\"JavaScript\")} Code </button> */}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from \"react\";\nimport qs from 'qs' //queryString to convert body of the POST request as per Postbin API requirements\nimport axios from 'axios' //axios to make API calls\n\nimport { useLocalStorage } from \"../hooks/useLocalStorage\"; //Custom hook to use local storage\n\nimport Editor from \"./Editor\"; //Custom Editor Component\nimport Popup from \"./Popup\"; //Custom Editor Component\nimport FileExplorer from \"./FileExplorer\"; //Custom Editor Component\n\nfunction App() {\n  // Localstorage hooks to store and retreive the code written locally to make it refresh proof\n  const [html, setHtml] = useLocalStorage('html','')\n  const [css, setCss] = useLocalStorage('css','')\n  const [js, setJs] = useLocalStorage('js','')\n\n  //States and use State definitions\n  const [srcDoc,setSrcDoc] = useState('') //document to be rendered live\n  const [language,setLanguage]=useState(\"\") //language editor currently being used\n  const [popup,setPopup]=useState(false) //popup enable\n  const [importLink,setImportLink]=useState(\"\") //import link entered by user\n  const [pastebinLink,setPastebinLink]=useState(\"\") //pastebin link generated\n\n  //Live rendering using React effects which take place when any language code is modified\n  useEffect(()=>{\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n      <html>\n        <body> ${html} </body>\n        <style> ${css} </style>\n        <script> ${js} </script>\n      </html>\n    `)\n    }, 1000) //a 1s timeout to prevent instant\n    return () => clearTimeout(timeout)\n  },[html,css,js])\n\n  const handleShare = async () => {\n    try {\n      const payload = {\n        html: html,\n        css: css,\n        js: js\n      }\n      const form = new FormData()\n      form.append('api_dev_key', 'TH8K4U4TC01zWHPuxBAGZqTtP-SZDW1w')\n      form.append('api_option', 'paste')\n      form.append('api_paste_code', JSON.stringify(payload))\n      const res = await axios({\n        method: 'post',\n        url: '/api/api_post.php',\n        data: form,\n        headers: { 'Content-Type': 'multipart/form-data' }\n      })\n\n      console.log(res)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  //POST request to postbin API and generating a URL\n  async function share() {\n    const response = await fetch(\"https://pastebin.com/api/api_post.php\", {\n      method: 'POST',\n      headers:{\n        'Content-Type' : 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': 'http://localhost:3000',\n        'Access-Control-Allow-Credentials': 'true'\n      },\n      body: qs.stringify({\n        api_dev_key: \"-_minsBkoasDP6qBhWXypBF5fzbyGNFT\",\n        api_option: \"paste\",\n        api_paste_code: (language===\"html\")?html:((language===\"css\")?css:js),\n        api_paste_format: (language===\"html\")?\"html5\":language\n      })\n    })//.then(response => console.log(response)).catch(err=>console.log(err))\n    //setPastebinLink(response.url)     \n    console.log(response)\n  }\n\n  //GET request to postbin API and importing the code\n  function getCode() {\n    const response=''\n    let headers = new Headers();\n    headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n    headers.append('Access-Control-Allow-Credentials', 'true');\n    const l='https://pastebin.com/raw/'+importLink.substr(importLink.length-8,8)\n    fetch(l,{\n      headers: headers\n    }).then(response => response.text()) .then(data => {\n      console.log(data)\n      // response=data\n    });\n      // if (language===\"html\") setHtml(response)\n      // else if (language===\"css\") setCss(response)\n      // else setJs(response)\n  }\n\n\n  return (\n    <>\n    \n    {/* Popup triggered to share Postbin URL generated */}\n    <Popup trigger={popup} link={pastebinLink} setTrigger={setPopup}/>\n\n    <div className={(language)?\"pane\":\"collapsed\"}>\n      {/* Horizontal File Explorer */}\n      <FileExplorer \n        language={language} \n        setLanguage={setLanguage} \n        share={share} \n        getCode={getCode} \n        importLink={importLink} \n        setImportLink={setImportLink}\n      />\n      {/* Single Editor */}\n      <Editor \n        language={language} \n        value={(language===\"html\")?html:((language===\"css\")?css:js)} \n        onChange={(language===\"html\")?setHtml:((language===\"css\")?setCss:setJs)} \n      /> \n    </div>\n\n    {/* Live Render */}\n    <div className={(language)?\"pane\":\"expanded\"}>\n      <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" frameBorder=\"0\" width=\"100%\" height=\"100%\"/>\n    </div>\n\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}